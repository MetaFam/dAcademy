/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()
const UserIndexLazyImport = createFileRoute('/user/')()
const UploadIndexLazyImport = createFileRoute('/upload/')()
const SearchIndexLazyImport = createFileRoute('/search/')()
const OrgIndexLazyImport = createFileRoute('/org/')()
const CurationIndexLazyImport = createFileRoute('/curation/')()
const CollectionIndexLazyImport = createFileRoute('/collection/')()
const AboutIndexLazyImport = createFileRoute('/about/')()
const UserUserLazyImport = createFileRoute('/user/$user')()
const ShelfNewLazyImport = createFileRoute('/shelf/new')()
const OrgIdLazyImport = createFileRoute('/org/$id')()
const BookSlugIndexLazyImport = createFileRoute('/book/$slug/')()
const BookSlugChapterIndexLazyImport = createFileRoute(
  '/book/$slug/$chapter/',
)()

// Create/Update Routes

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const UserIndexLazyRoute = UserIndexLazyImport.update({
  id: '/user/',
  path: '/user/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/user/index.lazy').then((d) => d.Route))

const UploadIndexLazyRoute = UploadIndexLazyImport.update({
  id: '/upload/',
  path: '/upload/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/upload/index.lazy').then((d) => d.Route))

const SearchIndexLazyRoute = SearchIndexLazyImport.update({
  id: '/search/',
  path: '/search/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/search/index.lazy').then((d) => d.Route))

const OrgIndexLazyRoute = OrgIndexLazyImport.update({
  id: '/org/',
  path: '/org/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/org/index.lazy').then((d) => d.Route))

const CurationIndexLazyRoute = CurationIndexLazyImport.update({
  id: '/curation/',
  path: '/curation/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/curation/index.lazy').then((d) => d.Route),
)

const CollectionIndexLazyRoute = CollectionIndexLazyImport.update({
  id: '/collection/',
  path: '/collection/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/collection/index.lazy').then((d) => d.Route),
)

const AboutIndexLazyRoute = AboutIndexLazyImport.update({
  id: '/about/',
  path: '/about/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about/index.lazy').then((d) => d.Route))

const UserUserLazyRoute = UserUserLazyImport.update({
  id: '/user/$user',
  path: '/user/$user',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/user/$user.lazy').then((d) => d.Route))

const ShelfNewLazyRoute = ShelfNewLazyImport.update({
  id: '/shelf/new',
  path: '/shelf/new',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/shelf/new.lazy').then((d) => d.Route))

const OrgIdLazyRoute = OrgIdLazyImport.update({
  id: '/org/$id',
  path: '/org/$id',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/org/$id.lazy').then((d) => d.Route))

const BookSlugIndexLazyRoute = BookSlugIndexLazyImport.update({
  id: '/book/$slug/',
  path: '/book/$slug/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/book/$slug/index.lazy').then((d) => d.Route),
)

const BookSlugChapterIndexLazyRoute = BookSlugChapterIndexLazyImport.update({
  id: '/book/$slug/$chapter/',
  path: '/book/$slug/$chapter/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/book/$slug/$chapter/index.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/org/$id': {
      id: '/org/$id'
      path: '/org/$id'
      fullPath: '/org/$id'
      preLoaderRoute: typeof OrgIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/shelf/new': {
      id: '/shelf/new'
      path: '/shelf/new'
      fullPath: '/shelf/new'
      preLoaderRoute: typeof ShelfNewLazyImport
      parentRoute: typeof rootRoute
    }
    '/user/$user': {
      id: '/user/$user'
      path: '/user/$user'
      fullPath: '/user/$user'
      preLoaderRoute: typeof UserUserLazyImport
      parentRoute: typeof rootRoute
    }
    '/about/': {
      id: '/about/'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/collection/': {
      id: '/collection/'
      path: '/collection'
      fullPath: '/collection'
      preLoaderRoute: typeof CollectionIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/curation/': {
      id: '/curation/'
      path: '/curation'
      fullPath: '/curation'
      preLoaderRoute: typeof CurationIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/org/': {
      id: '/org/'
      path: '/org'
      fullPath: '/org'
      preLoaderRoute: typeof OrgIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/search/': {
      id: '/search/'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/upload/': {
      id: '/upload/'
      path: '/upload'
      fullPath: '/upload'
      preLoaderRoute: typeof UploadIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/user/': {
      id: '/user/'
      path: '/user'
      fullPath: '/user'
      preLoaderRoute: typeof UserIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/book/$slug/': {
      id: '/book/$slug/'
      path: '/book/$slug'
      fullPath: '/book/$slug'
      preLoaderRoute: typeof BookSlugIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/book/$slug/$chapter/': {
      id: '/book/$slug/$chapter/'
      path: '/book/$slug/$chapter'
      fullPath: '/book/$slug/$chapter'
      preLoaderRoute: typeof BookSlugChapterIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/org/$id': typeof OrgIdLazyRoute
  '/shelf/new': typeof ShelfNewLazyRoute
  '/user/$user': typeof UserUserLazyRoute
  '/about': typeof AboutIndexLazyRoute
  '/collection': typeof CollectionIndexLazyRoute
  '/curation': typeof CurationIndexLazyRoute
  '/org': typeof OrgIndexLazyRoute
  '/search': typeof SearchIndexLazyRoute
  '/upload': typeof UploadIndexLazyRoute
  '/user': typeof UserIndexLazyRoute
  '/book/$slug': typeof BookSlugIndexLazyRoute
  '/book/$slug/$chapter': typeof BookSlugChapterIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/org/$id': typeof OrgIdLazyRoute
  '/shelf/new': typeof ShelfNewLazyRoute
  '/user/$user': typeof UserUserLazyRoute
  '/about': typeof AboutIndexLazyRoute
  '/collection': typeof CollectionIndexLazyRoute
  '/curation': typeof CurationIndexLazyRoute
  '/org': typeof OrgIndexLazyRoute
  '/search': typeof SearchIndexLazyRoute
  '/upload': typeof UploadIndexLazyRoute
  '/user': typeof UserIndexLazyRoute
  '/book/$slug': typeof BookSlugIndexLazyRoute
  '/book/$slug/$chapter': typeof BookSlugChapterIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/org/$id': typeof OrgIdLazyRoute
  '/shelf/new': typeof ShelfNewLazyRoute
  '/user/$user': typeof UserUserLazyRoute
  '/about/': typeof AboutIndexLazyRoute
  '/collection/': typeof CollectionIndexLazyRoute
  '/curation/': typeof CurationIndexLazyRoute
  '/org/': typeof OrgIndexLazyRoute
  '/search/': typeof SearchIndexLazyRoute
  '/upload/': typeof UploadIndexLazyRoute
  '/user/': typeof UserIndexLazyRoute
  '/book/$slug/': typeof BookSlugIndexLazyRoute
  '/book/$slug/$chapter/': typeof BookSlugChapterIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/org/$id'
    | '/shelf/new'
    | '/user/$user'
    | '/about'
    | '/collection'
    | '/curation'
    | '/org'
    | '/search'
    | '/upload'
    | '/user'
    | '/book/$slug'
    | '/book/$slug/$chapter'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/org/$id'
    | '/shelf/new'
    | '/user/$user'
    | '/about'
    | '/collection'
    | '/curation'
    | '/org'
    | '/search'
    | '/upload'
    | '/user'
    | '/book/$slug'
    | '/book/$slug/$chapter'
  id:
    | '__root__'
    | '/'
    | '/org/$id'
    | '/shelf/new'
    | '/user/$user'
    | '/about/'
    | '/collection/'
    | '/curation/'
    | '/org/'
    | '/search/'
    | '/upload/'
    | '/user/'
    | '/book/$slug/'
    | '/book/$slug/$chapter/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  OrgIdLazyRoute: typeof OrgIdLazyRoute
  ShelfNewLazyRoute: typeof ShelfNewLazyRoute
  UserUserLazyRoute: typeof UserUserLazyRoute
  AboutIndexLazyRoute: typeof AboutIndexLazyRoute
  CollectionIndexLazyRoute: typeof CollectionIndexLazyRoute
  CurationIndexLazyRoute: typeof CurationIndexLazyRoute
  OrgIndexLazyRoute: typeof OrgIndexLazyRoute
  SearchIndexLazyRoute: typeof SearchIndexLazyRoute
  UploadIndexLazyRoute: typeof UploadIndexLazyRoute
  UserIndexLazyRoute: typeof UserIndexLazyRoute
  BookSlugIndexLazyRoute: typeof BookSlugIndexLazyRoute
  BookSlugChapterIndexLazyRoute: typeof BookSlugChapterIndexLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  OrgIdLazyRoute: OrgIdLazyRoute,
  ShelfNewLazyRoute: ShelfNewLazyRoute,
  UserUserLazyRoute: UserUserLazyRoute,
  AboutIndexLazyRoute: AboutIndexLazyRoute,
  CollectionIndexLazyRoute: CollectionIndexLazyRoute,
  CurationIndexLazyRoute: CurationIndexLazyRoute,
  OrgIndexLazyRoute: OrgIndexLazyRoute,
  SearchIndexLazyRoute: SearchIndexLazyRoute,
  UploadIndexLazyRoute: UploadIndexLazyRoute,
  UserIndexLazyRoute: UserIndexLazyRoute,
  BookSlugIndexLazyRoute: BookSlugIndexLazyRoute,
  BookSlugChapterIndexLazyRoute: BookSlugChapterIndexLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/org/$id",
        "/shelf/new",
        "/user/$user",
        "/about/",
        "/collection/",
        "/curation/",
        "/org/",
        "/search/",
        "/upload/",
        "/user/",
        "/book/$slug/",
        "/book/$slug/$chapter/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/org/$id": {
      "filePath": "org/$id.lazy.tsx"
    },
    "/shelf/new": {
      "filePath": "shelf/new.lazy.tsx"
    },
    "/user/$user": {
      "filePath": "user/$user.lazy.tsx"
    },
    "/about/": {
      "filePath": "about/index.lazy.tsx"
    },
    "/collection/": {
      "filePath": "collection/index.lazy.tsx"
    },
    "/curation/": {
      "filePath": "curation/index.lazy.tsx"
    },
    "/org/": {
      "filePath": "org/index.lazy.tsx"
    },
    "/search/": {
      "filePath": "search/index.lazy.tsx"
    },
    "/upload/": {
      "filePath": "upload/index.lazy.tsx"
    },
    "/user/": {
      "filePath": "user/index.lazy.tsx"
    },
    "/book/$slug/": {
      "filePath": "book/$slug/index.lazy.tsx"
    },
    "/book/$slug/$chapter/": {
      "filePath": "book/$slug/$chapter/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
